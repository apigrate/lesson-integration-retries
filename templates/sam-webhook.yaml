#
# Archetype for a webhook-triggered integration.
#   Defines:
#    1. processing queue
#    2. dead letter queue
#    3. lambda to handle webhook (including API gateway definition)
#    4. lambda to process enqueued data
#
# To save time, replace the following (case-sensistive):
#   myapp => with name of app abbreviation (lowercase)
#   Entities => with plural name of entity (Title Case), e.g. "Tickets", "Accounts" etc.
#   entities => with plural name of entity (lowercase), e.g. "tickets", "accounts" etc.
#   Entity => with name of entity (Title Case), e.g. "Ticket", "Account" etc.
#   entity => with name of entity (lowercase), e.g. "ticket", "account" etc.
#
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Cloud automation scripts for myapp.
Parameters:
  # Manually define this in AWS IAM for just the services needed.
  lambdaExecutionRole:
    Description: 'Required. The role used for lambda execution.'
    Type: 'String'
    Default: 'arn:aws:iam::nnnnnnnnnnn:role/LambdaExecutionRole'

Globals:
  Function:
    CodeUri: ../dist
    Runtime: nodejs14.x
    MemorySize: 256
    Timeout: 60
    # Make sure to change the layer version below if you make a new common layer deployment.
    Layers:
      - 'arn:aws:lambda:us-east-1:nnnnnnnnnnn:layer:myapp-serverless-common:1'
  #   # Environment variables can also be provided in an .env file instead of the SAM file, if desired.
  #   Environment:
  #     Variables:
  #       NODE_ENV: test
  #       APP1_PRIVATE_KEY: '{{resolve:ssm:APP1_PRIVATE_KEY:1}}'
          
  # Api:
  #   Cors:
  #     AllowMethods: "'DELETE,GET,POST,PUT'"
  #     AllowHeaders: "'*'"
  #     AllowOrigin: "'*'"

Resources:
  # If more than one automation for a client, you can share common libraries in a layer.
  # You may wish to deploy the layer in a separate SAM file.
  # CommonDependenciesLayer:
  #   Type: AWS::Serverless::LayerVersion
  #   Properties:
  #     LayerName: myapp-common-deps
  #     Description: Common dependencies for my apps
  #     ContentUri: ../common-deps/
  #     RetentionPolicy: Retain

  # Queue names should evoke what is being stored...
  
  # A dead-letter queue.
  entityQueueDL:
    Type: 'AWS::SQS::Queue'
    Properties: 
      MessageRetentionPeriod: 345600
      QueueName: 'entities-dlq'
      VisibilityTimeout: 90

  # The queue for messages.
  entityQueue:
    Type: 'AWS::SQS::Queue'
    Properties: 
      MessageRetentionPeriod: 345600
      QueueName: 'entities'
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt entityQueueDL.Arn
        # Note, a maxReceiveCount=1 means no retries (message is only read for processing once).
        #  if an error occurs, it is sent to the dead-letter-queue immediately.
        # Retry once by default...
        maxReceiveCount: 2
      # Amazon recommends VisiblityTimeout should be at least 6*Timeout of Lambda Processing Fct to give the fct enough time to handle retries etc.
      VisibilityTimeout: 600
  
  handleEntityWebhook:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: handleEntityWebhook
      Handler: index.handleEntityWebhook
      # Layers:
      #   - !Ref CommonDependenciesLayer  ...or...
      #   - arn:aws:lambda:us-east-1:149827180975:layer:myapp-common-deps:5
      Description: Processes a webhook, enqueuing the entity data into an SQS queue.
      Role:
        Ref: lambdaExecutionRole
      Events:
        # Define the API Gateway endpoint here.
        ApiHandleMessage:
          Type: Api
          Properties:
            Path: '/app/handle-entity-webhook/'
            Method: POST
      Environment:
        Variables:
          DEBUG: 'myapp*'
          LOG_LEVEL: debug
          QUEUE_URL: 
            Ref: entityQueue
          # SLACK_WEBHOOK_URL: '{{resolve:ssm:SLACK_WEBHOOK_URL:1}}'
      Tags:
        foo: bar

  processEntity:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: processEntity
      Handler: index.processEntity
      Description: Processes a entity ...
      Role:
        Ref: lambdaExecutionRole
      Events:
        # A Preexisting Queue should be defined to hold the queue of company updates.
        ProcessEntityFromQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt entityQueue.Arn
            BatchSize: 1
      Environment:
        Variables:
          DEBUG: 'myapp*'
          LOG_LEVEL: debug
          PROCESSING_MODE: active
          # If not using .dotenv, you can store private parms in AWS Systems Manager Parameter Store...
          # APP1_PRIVATE_KEY: '{{resolve:ssm:APP1_PRIVATE_KEY:1}}'
          # APP2_ACCESS_TOKEN: '{{resolve:ssm:APP2_ACCESS_TOKEN:1}}'